import ballerina/grpc;
import ballerina/crypto;
import ballerina/log;
import ballerina/io;

listener grpc:Listener ep = new (9090);

map <recordInfo> Songs = {};

service recordsService on ep {

    resource function writeRecord(grpc:Caller caller, recordInfo value) {
        // Implementation goes here.
        byte[] hash = [];
        byte[] data = [];
        
        
        if(Songs.hasKey(value.toString())){
            string message = "Error, this song already exists in record";
			error? result = caller->send(message);
        }else{
            Songs[value.toString()] = <@untainted> value; 
            
            
        data = value.toString().toBytes();
        hash = crypto:hashSha384(data);
        
        io:println("Encryption with sha384: " + hash.toBase16());

            grpc:Error? result = caller->send(hash.toBase16());

            if(result is grpc:Error){
                log:printError("HashCode failed because " + result.reason().toString());
                
                result = caller->complete();
            }else{
                value.key = hash.toBase16();
            }
        }// You should return a hashCode
    }
    resource function updateRecord(grpc:Caller caller, hashCode value) {
        // Implementation goes here.
        map<json> |error recordInfo = map<json>.constructFrom(value);

        var response = caller ->send("Data received");
        if(response is grpc:Error){
            
            io:println("Error from client");
        }
        response = caller->complete();
        if(response is grpc:Error){

            io:println("Error from server");
        }
        

				io:println("****************** New Records ******************");
				io:println("Key          : ", value.key);
				io:println("Date         : ", value["date"];
				io:println("Artists      : ", value.artists);
                io:println("Tracks       : ", value.songs);
				io:println("Band         : ", value.band);
		// You should return a recordInfo
    }
        
    
    resource function readRecord(grpc:Caller caller, hashCode value) {
        // Implementation goes here.

        // You should return a recordInfo
    }
}

public type Tracks record {|
    string title = "";
    string genre = "";
    string platform = "";
    
|};

public type Artists record {|
    string name = "";
    string member = "";
    
|};

public type recordInfo record {|
    string key = "";
    string date = "";
    Artists[] artists = [];
    string band = "";
    Tracks[] songs = [];
    
|};

public type hashCode record {|
    string key = "";
    
|};



const string
function getDescriptorMap() returns map<string> {
    return {
        "records.proto
        
    };
}

*******************
import ballerina/io;
public function main (string... args) {

    recordsServiceClient blockingEp = new("http://localhost:9090");

        if (mode == "addSong") {
        recordInfo info = {
                date: "22/10/2020",
                artists: [
                    {
                    name: "Winston Marshall",
                    member: "yes"
                    },
                    {
                    name: "Ben Lovett",
                    member: "yes"
                    },
                    {
                    name: "Baaba Maal",
                    member: "no"
                    }
                ],
                band: "Mumford & Sons",
                songs: [
                    {
                        title: "There will be time",
                        genre: "folk rock",
                        platform: "Deezer"
                    }
                ]
            };

            [hashCode, grpc:Headers] result = check blockingEp->writeRecord(info);
            io:println("The record has been added successfully");
			io:println("HASH KEY : ",result);

    } else if (mode == "updateSong") {
    } else if (mode == "readSong") {
    } else {
        io:println("Operation unsupported! ");
        return;
    }

}

***********